/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package jni;


import sdd.Sdd;

public class SddLib implements SddLibConstants {

	public static void sdd_ref_multi(
			JNITYPE_p_sdd_manager_t manager,
			Sdd[] nodes) {

            long[] pointers = new long[nodes.length];
            for (int i = 0; i < nodes.length; i++) {
                pointers[i] = JNITYPE_p_sdd_node_t.getCPtr(nodes[i].getPointer());
            }
		SddLibJNI.sdd_ref_multi(JNITYPE_p_sdd_manager_t.getCPtr(manager), pointers);
	}

	public static void sdd_deref_multi(
			JNITYPE_p_sdd_manager_t manager,
			Sdd[] nodes) {

            long[] pointers = new long[nodes.length];
            for (int i = 0; i < nodes.length; i++) {
                pointers[i] = JNITYPE_p_sdd_node_t.getCPtr(nodes[i].getPointer());
            }
		SddLibJNI.sdd_deref_multi(JNITYPE_p_sdd_manager_t.getCPtr(manager), pointers);
	}

	public static void sdd_ref_gc_deref(
			JNITYPE_p_sdd_manager_t manager,
			Sdd[] nodes) {

            long[] pointers = new long[nodes.length];
            for (int i = 0; i < nodes.length; i++) {
                pointers[i] = JNITYPE_p_sdd_node_t.getCPtr(nodes[i].getPointer());
            }
		SddLibJNI.sdd_ref_gc_deref(JNITYPE_p_sdd_manager_t.getCPtr(manager), pointers);
	}
	
	public static JNITYPE_p_sdd_manager_t sdd_manager_new(
			JNITYPE_p_vtree_t vtree) {
		long cPtr = SddLibJNI
				.sdd_manager_new(JNITYPE_p_vtree_t.getCPtr(vtree));
		return (cPtr == 0) ? null : new JNITYPE_p_sdd_manager_t(cPtr);
	}

	public static JNITYPE_p_sdd_manager_t sdd_manager_create(long var_count,
															 int auto_gc_and_minimize) {
		long cPtr = SddLibJNI.sdd_manager_create(var_count,
				auto_gc_and_minimize);
		return (cPtr == 0) ? null : new JNITYPE_p_sdd_manager_t(cPtr);
	}

	public static JNITYPE_p_sdd_manager_t sdd_manager_copy(JNITYPE_p_sdd_node_t[] nodes,
															 JNITYPE_p_sdd_manager_t from_manager) {
		int l = nodes.length;
		long[] lNodes = new long[l];
		for (int i = 0; i < l; i++)
			lNodes[i] = JNITYPE_p_sdd_node_t.getCPtr(nodes[i]);

        long cPtr = SddLibJNI.sdd_manager_copy(lNodes, JNITYPE_p_sdd_manager_t.getCPtr(from_manager));

        return (cPtr == 0) ? null : new JNITYPE_p_sdd_manager_t(cPtr);

	}

	public static void sdd_manager_free(JNITYPE_p_sdd_manager_t manager) {
		SddLibJNI.sdd_manager_free(JNITYPE_p_sdd_manager_t.getCPtr(manager));
	}

	public static void sdd_manager_print(JNITYPE_p_sdd_manager_t manager) {
		SddLibJNI.sdd_manager_print(JNITYPE_p_sdd_manager_t.getCPtr(manager));
	}

	public static void sdd_manager_auto_gc_and_minimize_on(
			JNITYPE_p_sdd_manager_t manager) {
		SddLibJNI.sdd_manager_auto_gc_and_minimize_on(JNITYPE_p_sdd_manager_t
				.getCPtr(manager));
	}

	public static void sdd_manager_auto_gc_and_minimize_off(
			JNITYPE_p_sdd_manager_t manager) {
		SddLibJNI.sdd_manager_auto_gc_and_minimize_off(JNITYPE_p_sdd_manager_t
				.getCPtr(manager));
	}

	public static int sdd_manager_is_auto_gc_and_minimize_on(JNITYPE_p_sdd_manager_t manager) {
        return SddLibJNI.sdd_manager_is_auto_gc_and_minimize_on(JNITYPE_p_sdd_manager_t.getCPtr(manager));
    }

	public static long sdd_manager_options(JNITYPE_p_sdd_manager_t manager) {
		return SddLibJNI.sdd_manager_options(JNITYPE_p_sdd_manager_t
				.getCPtr(manager));
	}

	public static void sdd_manager_set_options(long options,
			JNITYPE_p_sdd_manager_t manager) {
		SddLibJNI.sdd_manager_set_options(options,
				JNITYPE_p_sdd_manager_t.getCPtr(manager));
	}

	public static int sdd_manager_is_var_used(long var,
			JNITYPE_p_sdd_manager_t manager) {
		return SddLibJNI.sdd_manager_is_var_used(var,
				JNITYPE_p_sdd_manager_t.getCPtr(manager));
	}

	public static JNITYPE_p_vtree_t sdd_manager_vtree_of_var(long var,
			JNITYPE_p_sdd_manager_t manager) {
		long cPtr = SddLibJNI.sdd_manager_vtree_of_var(var,
				JNITYPE_p_sdd_manager_t.getCPtr(manager));
		return (cPtr == 0) ? null : new JNITYPE_p_vtree_t(cPtr);
	}

	public static JNITYPE_p_vtree_t sdd_manager_lca_of_literals(int count,
			long[] literals, JNITYPE_p_sdd_manager_t manager) {
		long cPtr = SddLibJNI.sdd_manager_lca_of_literals(count, literals,
				JNITYPE_p_sdd_manager_t.getCPtr(manager));
		return (cPtr == 0) ? null : new JNITYPE_p_vtree_t(cPtr);
	}

	public static long sdd_manager_var_count(JNITYPE_p_sdd_manager_t manager) {
		return SddLibJNI.sdd_manager_var_count(JNITYPE_p_sdd_manager_t
				.getCPtr(manager));
	}

	public static void sdd_manager_var_order(long[] var_order,
			JNITYPE_p_sdd_manager_t manager) {
		SddLibJNI.sdd_manager_var_order(var_order,
				JNITYPE_p_sdd_manager_t.getCPtr(manager));
	}

	public static void sdd_manager_add_var_before_first(
			JNITYPE_p_sdd_manager_t manager) {
		SddLibJNI.sdd_manager_add_var_before_first(JNITYPE_p_sdd_manager_t
				.getCPtr(manager));
	}

	public static void sdd_manager_add_var_after_last(
			JNITYPE_p_sdd_manager_t manager) {
		SddLibJNI.sdd_manager_add_var_after_last(JNITYPE_p_sdd_manager_t
				.getCPtr(manager));
	}

	public static void sdd_manager_add_var_before(long target_var,
			JNITYPE_p_sdd_manager_t manager) {
		SddLibJNI.sdd_manager_add_var_before(target_var,
				JNITYPE_p_sdd_manager_t.getCPtr(manager));
	}

	public static void sdd_manager_add_var_after(long target_var,
			JNITYPE_p_sdd_manager_t manager) {
		SddLibJNI.sdd_manager_add_var_after(target_var,
				JNITYPE_p_sdd_manager_t.getCPtr(manager));
	}

	public static void add_var_before_lca(int count, long[] variables, JNITYPE_p_sdd_manager_t manager) {
		SddLibJNI.add_var_before_lca(count, variables, JNITYPE_p_sdd_manager_t.getCPtr(manager));
	}

	public static void move_var_before_first(long var, JNITYPE_p_sdd_manager_t manager) {
		SddLibJNI.move_var_before_first(var, JNITYPE_p_sdd_manager_t.getCPtr(manager));
	}

	public static void move_var_after_last(long var, JNITYPE_p_sdd_manager_t manager) {
		SddLibJNI.move_var_after_last(var, JNITYPE_p_sdd_manager_t.getCPtr(manager));
	}

	public static void move_var_before(long var, long target_var, JNITYPE_p_sdd_manager_t manager) {
		SddLibJNI.move_var_before(var, target_var, JNITYPE_p_sdd_manager_t.getCPtr(manager));
	}

	public static void move_var_after(long var, long target_var, JNITYPE_p_sdd_manager_t manager) {
		SddLibJNI.move_var_after(var, target_var, JNITYPE_p_sdd_manager_t.getCPtr(manager));
	}

	public static void remove_var_added_last(JNITYPE_p_sdd_manager_t manager) {
		SddLibJNI.remove_var_added_last(JNITYPE_p_sdd_manager_t.getCPtr(manager));
	}

	public static JNITYPE_p_sdd_node_t sdd_manager_true(
			JNITYPE_p_sdd_manager_t manager) {
		long cPtr = SddLibJNI.sdd_manager_true(JNITYPE_p_sdd_manager_t
				.getCPtr(manager));
		return (cPtr == 0) ? null : new JNITYPE_p_sdd_node_t(cPtr);
	}

	public static JNITYPE_p_sdd_node_t sdd_manager_false(
			JNITYPE_p_sdd_manager_t manager) {
		long cPtr = SddLibJNI.sdd_manager_false(JNITYPE_p_sdd_manager_t
				.getCPtr(manager));
		return (cPtr == 0) ? null : new JNITYPE_p_sdd_node_t(cPtr);
	}

	public static JNITYPE_p_sdd_node_t sdd_manager_literal(long literal,
			JNITYPE_p_sdd_manager_t manager) {
		long cPtr = SddLibJNI.sdd_manager_literal(literal,
				JNITYPE_p_sdd_manager_t.getCPtr(manager));
		return (cPtr == 0) ? null : new JNITYPE_p_sdd_node_t(cPtr);
	}

	public static JNITYPE_p_sdd_node_t sdd_apply(JNITYPE_p_sdd_node_t node1,
			JNITYPE_p_sdd_node_t node2, int op,
			JNITYPE_p_sdd_manager_t manager) {
		long cPtr = SddLibJNI.sdd_apply(JNITYPE_p_sdd_node_t.getCPtr(node1),
				JNITYPE_p_sdd_node_t.getCPtr(node2), op,
				JNITYPE_p_sdd_manager_t.getCPtr(manager));
		return (cPtr == 0) ? null : new JNITYPE_p_sdd_node_t(cPtr);
	}

//	public static JNITYPE_p_sdd_node_t sdd_apply_in_vtree(
//			JNITYPE_p_sdd_node_t node1, JNITYPE_p_sdd_node_t node2, int op,
//			JNITYPE_p_vtree_t vtree, JNITYPE_p_sdd_manager_t manager) {
//		long cPtr = SddLibJNI.sdd_apply_in_vtree(
//				JNITYPE_p_sdd_node_t.getCPtr(node1),
//				JNITYPE_p_sdd_node_t.getCPtr(node2), op,
//				JNITYPE_p_vtree_t.getCPtr(vtree),
//				JNITYPE_p_sdd_manager_t.getCPtr(manager));
//		return (cPtr == 0) ? null : new JNITYPE_p_sdd_node_t(cPtr, false);
//	}

	public static JNITYPE_p_sdd_node_t sdd_conjoin(
			JNITYPE_p_sdd_node_t node1, JNITYPE_p_sdd_node_t node2,
			JNITYPE_p_sdd_manager_t manager) {
		long cPtr = SddLibJNI.sdd_conjoin(JNITYPE_p_sdd_node_t.getCPtr(node1),
				JNITYPE_p_sdd_node_t.getCPtr(node2),
				JNITYPE_p_sdd_manager_t.getCPtr(manager));
		return (cPtr == 0) ? null : new JNITYPE_p_sdd_node_t(cPtr);
	}

	public static JNITYPE_p_sdd_node_t sdd_disjoin(
			JNITYPE_p_sdd_node_t node1, JNITYPE_p_sdd_node_t node2,
			JNITYPE_p_sdd_manager_t manager) {
		long cPtr = SddLibJNI.sdd_disjoin(JNITYPE_p_sdd_node_t.getCPtr(node1),
				JNITYPE_p_sdd_node_t.getCPtr(node2),
				JNITYPE_p_sdd_manager_t.getCPtr(manager));
		return (cPtr == 0) ? null : new JNITYPE_p_sdd_node_t(cPtr);
	}

	public static JNITYPE_p_sdd_node_t sdd_negate(JNITYPE_p_sdd_node_t node,
			JNITYPE_p_sdd_manager_t manager) {
		long cPtr = SddLibJNI.sdd_negate(JNITYPE_p_sdd_node_t.getCPtr(node),
				JNITYPE_p_sdd_manager_t.getCPtr(manager));
		return (cPtr == 0) ? null : new JNITYPE_p_sdd_node_t(cPtr);
	}

	public static JNITYPE_p_sdd_node_t sdd_condition(long lit,
			JNITYPE_p_sdd_node_t node, JNITYPE_p_sdd_manager_t manager) {
		long cPtr = SddLibJNI.sdd_condition(lit,
				JNITYPE_p_sdd_node_t.getCPtr(node),
				JNITYPE_p_sdd_manager_t.getCPtr(manager));
		return (cPtr == 0) ? null : new JNITYPE_p_sdd_node_t(cPtr);
	}

	public static JNITYPE_p_sdd_node_t sdd_exists(long var,
												   JNITYPE_p_sdd_node_t node, JNITYPE_p_sdd_manager_t manager) {
		long cPtr = SddLibJNI.sdd_exists(var,
				JNITYPE_p_sdd_node_t.getCPtr(node),
				JNITYPE_p_sdd_manager_t.getCPtr(manager));
		return (cPtr == 0) ? null : new JNITYPE_p_sdd_node_t(cPtr);
	}


    public static JNITYPE_p_sdd_node_t sdd_exists_multiple(int[] exists_map,
                                                           JNITYPE_p_sdd_node_t node, JNITYPE_p_sdd_manager_t manager) {

        JNITYPE_p_sdd_node_t.getCPtr(node);
        JNITYPE_p_sdd_manager_t.getCPtr(manager);

        long cPtr = SddLibJNI.sdd_exists_multiple(exists_map,
                JNITYPE_p_sdd_node_t.getCPtr(node),
                JNITYPE_p_sdd_manager_t.getCPtr(manager));
        return (cPtr == 0) ? null : new JNITYPE_p_sdd_node_t(cPtr);
    }


    public static JNITYPE_p_sdd_node_t sdd_exists_multiple_static(int[] exists_map,
                                                           JNITYPE_p_sdd_node_t node, JNITYPE_p_sdd_manager_t manager) {

        JNITYPE_p_sdd_node_t.getCPtr(node);
        JNITYPE_p_sdd_manager_t.getCPtr(manager);

        long cPtr = SddLibJNI.sdd_exists_multiple_static(exists_map,
                JNITYPE_p_sdd_node_t.getCPtr(node),
                JNITYPE_p_sdd_manager_t.getCPtr(manager));
        return (cPtr == 0) ? null : new JNITYPE_p_sdd_node_t(cPtr);
    }

    public static JNITYPE_p_sdd_node_t sdd_forall(long var,
			JNITYPE_p_sdd_node_t node, JNITYPE_p_sdd_manager_t manager) {
		long cPtr = SddLibJNI.sdd_forall(var,
				JNITYPE_p_sdd_node_t.getCPtr(node),
				JNITYPE_p_sdd_manager_t.getCPtr(manager));
		return (cPtr == 0) ? null : new JNITYPE_p_sdd_node_t(cPtr);
	}

    public static JNITYPE_p_sdd_node_t sdd_minimize_cardinality(
            JNITYPE_p_sdd_node_t node, JNITYPE_p_sdd_manager_t manager) {
        long cPtr = SddLibJNI.sdd_minimize_cardinality(
                JNITYPE_p_sdd_node_t.getCPtr(node),
                JNITYPE_p_sdd_manager_t.getCPtr(manager));
        return (cPtr == 0) ? null : new JNITYPE_p_sdd_node_t(cPtr);
    }

    public static JNITYPE_p_sdd_node_t sdd_global_minimize_cardinality(
            JNITYPE_p_sdd_node_t node, JNITYPE_p_sdd_manager_t manager) {
        long cPtr = SddLibJNI.sdd_global_minimize_cardinality(
                JNITYPE_p_sdd_node_t.getCPtr(node),
                JNITYPE_p_sdd_manager_t.getCPtr(manager));
        return (cPtr == 0) ? null : new JNITYPE_p_sdd_node_t(cPtr);
    }

	public static long sdd_minimum_cardinality(JNITYPE_p_sdd_node_t node) {
		return SddLibJNI.sdd_minimum_cardinality(JNITYPE_p_sdd_node_t
				.getCPtr(node));
	}

    public static java.math.BigInteger sdd_model_count(
            JNITYPE_p_sdd_node_t node, JNITYPE_p_sdd_manager_t manager) {
        return SddLibJNI.sdd_model_count(JNITYPE_p_sdd_node_t.getCPtr(node),
                JNITYPE_p_sdd_manager_t.getCPtr(manager));
    }

    public static java.math.BigInteger sdd_global_model_count(
            JNITYPE_p_sdd_node_t node, JNITYPE_p_sdd_manager_t manager) {
        return SddLibJNI.sdd_global_model_count(JNITYPE_p_sdd_node_t.getCPtr(node),
                JNITYPE_p_sdd_manager_t.getCPtr(manager));
    }

	public static int sdd_node_is_true(JNITYPE_p_sdd_node_t node) {
		return SddLibJNI.sdd_node_is_true(JNITYPE_p_sdd_node_t.getCPtr(node));
	}

	public static int sdd_node_is_false(JNITYPE_p_sdd_node_t node) {
		return SddLibJNI.sdd_node_is_false(JNITYPE_p_sdd_node_t.getCPtr(node));
	}

	public static int sdd_node_is_literal(JNITYPE_p_sdd_node_t node) {
		return SddLibJNI.sdd_node_is_literal(JNITYPE_p_sdd_node_t
				.getCPtr(node));
	}

	public static int sdd_node_is_decision(JNITYPE_p_sdd_node_t node) {
		return SddLibJNI.sdd_node_is_decision(JNITYPE_p_sdd_node_t
				.getCPtr(node));
	}

	public static long sdd_node_size(JNITYPE_p_sdd_node_t node) {
		return SddLibJNI.sdd_node_size(JNITYPE_p_sdd_node_t.getCPtr(node));
	}

	public static long sdd_node_literal(JNITYPE_p_sdd_node_t node) {
		return SddLibJNI.sdd_node_literal(JNITYPE_p_sdd_node_t.getCPtr(node));
	}

	public static JNITYPE_p_sdd_node_t[] sdd_node_elements(
			JNITYPE_p_sdd_node_t node) {
		long[] nodes = SddLibJNI.sdd_node_elements(JNITYPE_p_sdd_node_t
				.getCPtr(node));
		if (nodes==null)
			return null;
		int l = nodes.length;
		JNITYPE_p_sdd_node_t[] snodes = new JNITYPE_p_sdd_node_t[l];
		for (int i=0; i<l; i++)
			snodes[i] = new JNITYPE_p_sdd_node_t(nodes[i]);
		return snodes;
	}

	public static void sdd_node_set_bit(int bit, JNITYPE_p_sdd_node_t node) {
		SddLibJNI.sdd_node_set_bit(bit, JNITYPE_p_sdd_node_t.getCPtr(node));
	}

	public static int sdd_node_bit(JNITYPE_p_sdd_node_t node) {
		return SddLibJNI.sdd_node_bit(JNITYPE_p_sdd_node_t.getCPtr(node));
	}

	public static long sdd_id(JNITYPE_p_sdd_node_t node) {
		return SddLibJNI.sdd_id(JNITYPE_p_sdd_node_t.getCPtr(node));
	}

	public static int sdd_garbage_collected(JNITYPE_p_sdd_node_t node, long id) {
		return SddLibJNI.sdd_garbage_collected(
				JNITYPE_p_sdd_node_t.getCPtr(node), id);
	}

	public static JNITYPE_p_vtree_t sdd_vtree_of(JNITYPE_p_sdd_node_t node) {
		long cPtr = SddLibJNI.sdd_vtree_of(JNITYPE_p_sdd_node_t.getCPtr(node));
		return (cPtr == 0) ? null : new JNITYPE_p_vtree_t(cPtr);
	}

	public static JNITYPE_p_sdd_node_t sdd_copy(JNITYPE_p_sdd_node_t node,
			JNITYPE_p_sdd_manager_t dest_manager) {
		long cPtr = SddLibJNI.sdd_copy(JNITYPE_p_sdd_node_t.getCPtr(node),
				JNITYPE_p_sdd_manager_t.getCPtr(dest_manager));
		return (cPtr == 0) ? null : new JNITYPE_p_sdd_node_t(cPtr);
	}

	public static JNITYPE_p_sdd_node_t sdd_rename_variables(
			JNITYPE_p_sdd_node_t node, long[] variable_map,
			JNITYPE_p_sdd_manager_t manager) {
		long cPtr = SddLibJNI.sdd_rename_variables(
				JNITYPE_p_sdd_node_t.getCPtr(node), variable_map,
				JNITYPE_p_sdd_manager_t.getCPtr(manager));
		return (cPtr == 0) ? null : new JNITYPE_p_sdd_node_t(cPtr);
	}

	public static int[] sdd_variables(JNITYPE_p_sdd_node_t node,
			JNITYPE_p_sdd_manager_t manager) {
		return SddLibJNI.sdd_variables(
				JNITYPE_p_sdd_node_t.getCPtr(node),
				JNITYPE_p_sdd_manager_t.getCPtr(manager));
	}

	public static JNITYPE_p_sdd_node_t sdd_read(String filename,
			JNITYPE_p_sdd_manager_t manager) {
		long cPtr = SddLibJNI.sdd_read(filename,
				JNITYPE_p_sdd_manager_t.getCPtr(manager));
		return (cPtr == 0) ? null : new JNITYPE_p_sdd_node_t(cPtr);
	}

	public static void sdd_save(String fname, JNITYPE_p_sdd_node_t node) {
		SddLibJNI.sdd_save(fname, JNITYPE_p_sdd_node_t.getCPtr(node));
	}

	public static void sdd_save_as_dot(String fname, JNITYPE_p_sdd_node_t node) {
		SddLibJNI.sdd_save_as_dot(fname, JNITYPE_p_sdd_node_t.getCPtr(node));
	}

	public static void sdd_shared_save_as_dot(String fname,
			JNITYPE_p_sdd_manager_t manager) {
		SddLibJNI.sdd_shared_save_as_dot(fname,
				JNITYPE_p_sdd_manager_t.getCPtr(manager));
	}

	public static long sdd_count(JNITYPE_p_sdd_node_t node) {
		return SddLibJNI.sdd_count(JNITYPE_p_sdd_node_t.getCPtr(node));
	}

	public static long sdd_size(JNITYPE_p_sdd_node_t node) {
		return SddLibJNI.sdd_size(JNITYPE_p_sdd_node_t.getCPtr(node));
	}

	public static long sdd_shared_size(JNITYPE_p_sdd_node_t[] nodes, long count) {
		int l = nodes.length;
		long[] lnodes = new long[l];
		for (int i = 0; i < l; i++)
			lnodes[i] = JNITYPE_p_sdd_node_t.getCPtr(nodes[i]);

		return SddLibJNI.sdd_shared_size(lnodes, count);
	}

	public static long sdd_manager_size(JNITYPE_p_sdd_manager_t manager) {
		return SddLibJNI.sdd_manager_size(JNITYPE_p_sdd_manager_t
				.getCPtr(manager));
	}

	public static long sdd_manager_live_size(JNITYPE_p_sdd_manager_t manager) {
		return SddLibJNI.sdd_manager_live_size(JNITYPE_p_sdd_manager_t
				.getCPtr(manager));
	}

	public static long sdd_manager_dead_size(JNITYPE_p_sdd_manager_t manager) {
		return SddLibJNI.sdd_manager_dead_size(JNITYPE_p_sdd_manager_t
				.getCPtr(manager));
	}

	public static long sdd_manager_count(JNITYPE_p_sdd_manager_t manager) {
		return SddLibJNI.sdd_manager_count(JNITYPE_p_sdd_manager_t
				.getCPtr(manager));
	}

	public static long sdd_manager_live_count(JNITYPE_p_sdd_manager_t manager) {
		return SddLibJNI.sdd_manager_live_count(JNITYPE_p_sdd_manager_t
				.getCPtr(manager));
	}

	public static long sdd_manager_dead_count(JNITYPE_p_sdd_manager_t manager) {
		return SddLibJNI.sdd_manager_dead_count(JNITYPE_p_sdd_manager_t
				.getCPtr(manager));
	}

	public static long sdd_vtree_size(JNITYPE_p_vtree_t vtree) {
		return SddLibJNI.sdd_vtree_size(JNITYPE_p_vtree_t.getCPtr(vtree));
	}

	public static long sdd_vtree_live_size(JNITYPE_p_vtree_t vtree) {
		return SddLibJNI.sdd_vtree_live_size(JNITYPE_p_vtree_t.getCPtr(vtree));
	}

	public static long sdd_vtree_dead_size(JNITYPE_p_vtree_t vtree) {
		return SddLibJNI.sdd_vtree_dead_size(JNITYPE_p_vtree_t.getCPtr(vtree));
	}

	public static long sdd_vtree_count(JNITYPE_p_vtree_t vtree) {
		return SddLibJNI.sdd_vtree_count(JNITYPE_p_vtree_t.getCPtr(vtree));
	}

	public static long sdd_vtree_live_count(JNITYPE_p_vtree_t vtree) {
		return SddLibJNI
				.sdd_vtree_live_count(JNITYPE_p_vtree_t.getCPtr(vtree));
	}

	public static long sdd_vtree_dead_count(JNITYPE_p_vtree_t vtree) {
		return SddLibJNI
				.sdd_vtree_dead_count(JNITYPE_p_vtree_t.getCPtr(vtree));
	}

    public static long sdd_vtree_size_at(JNITYPE_p_vtree_t vtree) {
        return SddLibJNI.sdd_vtree_size_at(JNITYPE_p_vtree_t.getCPtr(vtree));
    }

    public static long sdd_vtree_live_size_at(JNITYPE_p_vtree_t vtree) {
        return SddLibJNI.sdd_vtree_live_size_at(JNITYPE_p_vtree_t
                .getCPtr(vtree));
    }

    public static long sdd_vtree_dead_size_at(JNITYPE_p_vtree_t vtree) {
        return SddLibJNI.sdd_vtree_dead_size_at(JNITYPE_p_vtree_t
                .getCPtr(vtree));
    }

    public static long sdd_vtree_size_above(JNITYPE_p_vtree_t vtree) {
        return SddLibJNI.sdd_vtree_size_above(JNITYPE_p_vtree_t.getCPtr(vtree));
    }

    public static long sdd_vtree_live_size_above(JNITYPE_p_vtree_t vtree) {
        return SddLibJNI.sdd_vtree_live_size_above(JNITYPE_p_vtree_t
                .getCPtr(vtree));
    }

    public static long sdd_vtree_dead_size_above(JNITYPE_p_vtree_t vtree) {
        return SddLibJNI.sdd_vtree_dead_size_above(JNITYPE_p_vtree_t
                .getCPtr(vtree));
    }

    public static long sdd_vtree_count_at(JNITYPE_p_vtree_t vtree) {
        return SddLibJNI.sdd_vtree_count_at(JNITYPE_p_vtree_t.getCPtr(vtree));
    }

    public static long sdd_vtree_live_count_at(JNITYPE_p_vtree_t vtree) {
        return SddLibJNI.sdd_vtree_live_count_at(JNITYPE_p_vtree_t
                .getCPtr(vtree));
    }

    public static long sdd_vtree_dead_count_at(JNITYPE_p_vtree_t vtree) {
        return SddLibJNI.sdd_vtree_dead_count_at(JNITYPE_p_vtree_t
                .getCPtr(vtree));
    }

    public static long sdd_vtree_count_above(JNITYPE_p_vtree_t vtree) {
        return SddLibJNI.sdd_vtree_count_above(JNITYPE_p_vtree_t.getCPtr(vtree));
    }

    public static long sdd_vtree_live_count_above(JNITYPE_p_vtree_t vtree) {
        return SddLibJNI.sdd_vtree_live_count_above(JNITYPE_p_vtree_t
                .getCPtr(vtree));
    }

    public static long sdd_vtree_dead_count_above(JNITYPE_p_vtree_t vtree) {
        return SddLibJNI.sdd_vtree_dead_count_above(JNITYPE_p_vtree_t
                .getCPtr(vtree));
    }

	public static JNITYPE_p_vtree_t sdd_vtree_new(long var_count, String type) {
		long cPtr = SddLibJNI.sdd_vtree_new(var_count, type);
		return (cPtr == 0) ? null : new JNITYPE_p_vtree_t(cPtr);
	}

    public static JNITYPE_p_vtree_t sdd_vtree_new_with_var_order(
            long var_count, long[] var_order, String type) {
        long cPtr = SddLibJNI.sdd_vtree_new_with_var_order(var_count,
                var_order, type);
        return (cPtr == 0) ? null : new JNITYPE_p_vtree_t(cPtr);
    }

    public static JNITYPE_p_vtree_t sdd_vtree_new_X_constrained(
            long var_count, long[] var_order, String type) {
        long cPtr = SddLibJNI.sdd_vtree_new_X_constrained(var_count,
                var_order, type);
        return (cPtr == 0) ? null : new JNITYPE_p_vtree_t(cPtr);
    }

	public static void sdd_vtree_free(JNITYPE_p_vtree_t vtree) {
		SddLibJNI.sdd_vtree_free(JNITYPE_p_vtree_t.getCPtr(vtree));
	}

	public static void sdd_vtree_save(String fname, JNITYPE_p_vtree_t vtree) {
		SddLibJNI.sdd_vtree_save(fname, JNITYPE_p_vtree_t.getCPtr(vtree));
	}

	public static JNITYPE_p_vtree_t sdd_vtree_read(String filename) {
		long cPtr = SddLibJNI.sdd_vtree_read(filename);
		return (cPtr == 0) ? null : new JNITYPE_p_vtree_t(cPtr);
	}

	public static void sdd_vtree_save_as_dot(String fname,
			JNITYPE_p_vtree_t vtree) {
		SddLibJNI.sdd_vtree_save_as_dot(fname,
				JNITYPE_p_vtree_t.getCPtr(vtree));
	}

	public static JNITYPE_p_vtree_t sdd_manager_vtree(
			JNITYPE_p_sdd_manager_t manager) {
		long cPtr = SddLibJNI.sdd_manager_vtree(JNITYPE_p_sdd_manager_t
				.getCPtr(manager));
		return (cPtr == 0) ? null : new JNITYPE_p_vtree_t(cPtr);
	}

	public static JNITYPE_p_vtree_t sdd_manager_vtree_copy(
			JNITYPE_p_sdd_manager_t manager) {
		long cPtr = SddLibJNI.sdd_manager_vtree_copy(JNITYPE_p_sdd_manager_t
				.getCPtr(manager));
		return (cPtr == 0) ? null : new JNITYPE_p_vtree_t(cPtr);
	}

	public static JNITYPE_p_vtree_t sdd_vtree_left(JNITYPE_p_vtree_t vtree) {
		long cPtr = SddLibJNI.sdd_vtree_left(JNITYPE_p_vtree_t.getCPtr(vtree));
		return (cPtr == 0) ? null : new JNITYPE_p_vtree_t(cPtr);
	}

	public static JNITYPE_p_vtree_t sdd_vtree_right(JNITYPE_p_vtree_t vtree) {
		long cPtr = SddLibJNI
				.sdd_vtree_right(JNITYPE_p_vtree_t.getCPtr(vtree));
		return (cPtr == 0) ? null : new JNITYPE_p_vtree_t(cPtr);
	}

	public static JNITYPE_p_vtree_t sdd_vtree_parent(JNITYPE_p_vtree_t vtree) {
		long cPtr = SddLibJNI.sdd_vtree_parent(JNITYPE_p_vtree_t
				.getCPtr(vtree));
		return (cPtr == 0) ? null : new JNITYPE_p_vtree_t(cPtr);
	}

	public static int sdd_vtree_is_leaf(JNITYPE_p_vtree_t vtree) {
		return SddLibJNI.sdd_vtree_is_leaf(JNITYPE_p_vtree_t.getCPtr(vtree));
	}

	public static int sdd_vtree_is_sub(JNITYPE_p_vtree_t vtree1,
			JNITYPE_p_vtree_t vtree2) {
		return SddLibJNI.sdd_vtree_is_sub(JNITYPE_p_vtree_t.getCPtr(vtree1),
				JNITYPE_p_vtree_t.getCPtr(vtree2));
	}

	public static JNITYPE_p_vtree_t sdd_vtree_lca(JNITYPE_p_vtree_t vtree1,
			JNITYPE_p_vtree_t vtree2, JNITYPE_p_vtree_t root) {
		long cPtr = SddLibJNI.sdd_vtree_lca(JNITYPE_p_vtree_t.getCPtr(vtree1),
				JNITYPE_p_vtree_t.getCPtr(vtree2),
				JNITYPE_p_vtree_t.getCPtr(root));
		return (cPtr == 0) ? null : new JNITYPE_p_vtree_t(cPtr);
	}

	public static long sdd_vtree_var_count(JNITYPE_p_vtree_t vtree) {
		return SddLibJNI.sdd_vtree_var_count(JNITYPE_p_vtree_t.getCPtr(vtree));
	}

	public static long sdd_vtree_var(JNITYPE_p_vtree_t vtree) {
		return SddLibJNI.sdd_vtree_var(JNITYPE_p_vtree_t.getCPtr(vtree));
	}

	public static long sdd_vtree_position(JNITYPE_p_vtree_t vtree) {
		return SddLibJNI.sdd_vtree_position(JNITYPE_p_vtree_t.getCPtr(vtree));
	}


	public static int sdd_vtree_rotate_left(JNITYPE_p_vtree_t vtree,
			JNITYPE_p_sdd_manager_t manager, int limited) {
		return SddLibJNI.sdd_vtree_rotate_left(
				JNITYPE_p_vtree_t.getCPtr(vtree),
				JNITYPE_p_sdd_manager_t.getCPtr(manager), limited);
	}

	public static int sdd_vtree_rotate_right(JNITYPE_p_vtree_t vtree,
			JNITYPE_p_sdd_manager_t manager, int limited) {
		return SddLibJNI.sdd_vtree_rotate_right(
				JNITYPE_p_vtree_t.getCPtr(vtree),
				JNITYPE_p_sdd_manager_t.getCPtr(manager), limited);
	}

	public static int sdd_vtree_swap(JNITYPE_p_vtree_t vtree,
			JNITYPE_p_sdd_manager_t manager, int limited) {
		return SddLibJNI.sdd_vtree_swap(JNITYPE_p_vtree_t.getCPtr(vtree),
				JNITYPE_p_sdd_manager_t.getCPtr(manager), limited);
	}

	public static void sdd_manager_init_vtree_size_limit(
			JNITYPE_p_vtree_t vtree, JNITYPE_p_sdd_manager_t manager) {
		SddLibJNI.sdd_manager_init_vtree_size_limit(
				JNITYPE_p_vtree_t.getCPtr(vtree),
				JNITYPE_p_sdd_manager_t.getCPtr(manager));
	}

	public static void sdd_manager_update_vtree_size_limit(
			JNITYPE_p_sdd_manager_t manager) {
		SddLibJNI
				.sdd_manager_update_vtree_size_limit(JNITYPE_p_sdd_manager_t
						.getCPtr(manager));
	}

	public static int sdd_vtree_bit(JNITYPE_p_vtree_t vtree) {
		return SddLibJNI.sdd_vtree_bit(JNITYPE_p_vtree_t.getCPtr(vtree));
	}

	public static void sdd_vtree_set_bit(int bit, JNITYPE_p_vtree_t vtree) {
		SddLibJNI.sdd_vtree_set_bit(bit, JNITYPE_p_vtree_t.getCPtr(vtree));
	}

	public static long sdd_vtree_data(JNITYPE_p_vtree_t vtree) {
		return SddLibJNI.sdd_vtree_data(JNITYPE_p_vtree_t.getCPtr(vtree));
	}

	public static void sdd_vtree_set_data(long data, JNITYPE_p_vtree_t vtree) {
		SddLibJNI.sdd_vtree_set_data(data, JNITYPE_p_vtree_t.getCPtr(vtree));
	}

	public static long sdd_ref_count(JNITYPE_p_sdd_node_t node) {
		return SddLibJNI.sdd_ref_count(JNITYPE_p_sdd_node_t.getCPtr(node));
	}

	public static JNITYPE_p_sdd_node_t sdd_ref(JNITYPE_p_sdd_node_t node,
			JNITYPE_p_sdd_manager_t manager) {
		long cPtr = SddLibJNI.sdd_ref(JNITYPE_p_sdd_node_t.getCPtr(node),
				JNITYPE_p_sdd_manager_t.getCPtr(manager));
		return (cPtr == 0) ? null : new JNITYPE_p_sdd_node_t(cPtr);
	}

	public static JNITYPE_p_sdd_node_t sdd_deref(JNITYPE_p_sdd_node_t node,
			JNITYPE_p_sdd_manager_t manager) {
		long cPtr = SddLibJNI.sdd_deref(JNITYPE_p_sdd_node_t.getCPtr(node),
				JNITYPE_p_sdd_manager_t.getCPtr(manager));
		return (cPtr == 0) ? null : new JNITYPE_p_sdd_node_t(cPtr);
	}

	public static void sdd_manager_garbage_collect(
			JNITYPE_p_sdd_manager_t manager) {
		SddLibJNI.sdd_manager_garbage_collect(JNITYPE_p_sdd_manager_t
				.getCPtr(manager));
	}

	public static void sdd_vtree_garbage_collect(JNITYPE_p_vtree_t vtree,
			JNITYPE_p_sdd_manager_t manager) {
		SddLibJNI.sdd_vtree_garbage_collect(JNITYPE_p_vtree_t.getCPtr(vtree),
				JNITYPE_p_sdd_manager_t.getCPtr(manager));
	}

	public static int sdd_manager_garbage_collect_if(float dead_node_threshold,
			JNITYPE_p_sdd_manager_t manager) {
		return SddLibJNI.sdd_manager_garbage_collect_if(dead_node_threshold,
				JNITYPE_p_sdd_manager_t.getCPtr(manager));
	}

	public static int sdd_vtree_garbage_collect_if(float dead_node_threshold,
			JNITYPE_p_vtree_t vtree, JNITYPE_p_sdd_manager_t manager) {
		return SddLibJNI.sdd_vtree_garbage_collect_if(dead_node_threshold,
				JNITYPE_p_vtree_t.getCPtr(vtree),
				JNITYPE_p_sdd_manager_t.getCPtr(manager));
	}

    public static void sdd_manager_minimize(JNITYPE_p_sdd_manager_t manager) {
        SddLibJNI.sdd_manager_minimize(JNITYPE_p_sdd_manager_t
                .getCPtr(manager));
    }

    public static JNITYPE_p_vtree_t sdd_vtree_minimize(
            JNITYPE_p_vtree_t vtree, JNITYPE_p_sdd_manager_t manager) {
        long cPtr = SddLibJNI.sdd_vtree_minimize(
                JNITYPE_p_vtree_t.getCPtr(vtree),
                JNITYPE_p_sdd_manager_t.getCPtr(manager));
        return (cPtr == 0) ? null : new JNITYPE_p_vtree_t(cPtr);
    }


    public static void sdd_manager_minimize_limited(JNITYPE_p_sdd_manager_t manager) {
        SddLibJNI.sdd_manager_minimize_limited(JNITYPE_p_sdd_manager_t
                .getCPtr(manager));
    }

    public static JNITYPE_p_vtree_t sdd_vtree_minimize_limited(
            JNITYPE_p_vtree_t vtree, JNITYPE_p_sdd_manager_t manager) {
        long cPtr = SddLibJNI.sdd_vtree_minimize_limited(
                JNITYPE_p_vtree_t.getCPtr(vtree),
                JNITYPE_p_sdd_manager_t.getCPtr(manager));
        return (cPtr == 0) ? null : new JNITYPE_p_vtree_t(cPtr);
    }

    public static void sdd_manager_set_vtree_search_convergence_threshold(float threshold, JNITYPE_p_sdd_manager_t manager){
        SddLibJNI.sdd_manager_set_vtree_search_convergence_threshold(threshold, JNITYPE_p_sdd_manager_t.getCPtr(manager));
    }

    public static void sdd_manager_set_vtree_search_time_limit(float time_limit, JNITYPE_p_sdd_manager_t manager){
        SddLibJNI.sdd_manager_set_vtree_search_time_limit(time_limit, JNITYPE_p_sdd_manager_t.getCPtr(manager));
    }

    public static void sdd_manager_set_vtree_fragment_time_limit(float time_limit, JNITYPE_p_sdd_manager_t manager){
        SddLibJNI.sdd_manager_set_vtree_fragment_time_limit(time_limit, JNITYPE_p_sdd_manager_t.getCPtr(manager));
    }

    public static void sdd_manager_set_vtree_apply_time_limit(float time_limit, JNITYPE_p_sdd_manager_t manager){
        SddLibJNI.sdd_manager_set_vtree_apply_time_limit(time_limit, JNITYPE_p_sdd_manager_t.getCPtr(manager));
    }

    public static void sdd_manager_set_vtree_operation_time_limit(float time_limit, JNITYPE_p_sdd_manager_t manager){
        SddLibJNI.sdd_manager_set_vtree_operation_time_limit(time_limit, JNITYPE_p_sdd_manager_t.getCPtr(manager));
    }

    public static void sdd_manager_set_vtree_operation_memory_limit(float memory_limit, JNITYPE_p_sdd_manager_t manager){
        SddLibJNI.sdd_manager_set_vtree_operation_memory_limit(memory_limit, JNITYPE_p_sdd_manager_t.getCPtr(manager));
    }

    public static void sdd_manager_set_vtree_operation_size_limit(float size_limit, JNITYPE_p_sdd_manager_t manager){
        SddLibJNI.sdd_manager_set_vtree_operation_size_limit(size_limit, JNITYPE_p_sdd_manager_t.getCPtr(manager));
    }

    public static void sdd_manager_set_vtree_cartesian_product_limit(long size_limit, JNITYPE_p_sdd_manager_t manager){
        SddLibJNI.sdd_manager_set_vtree_cartesian_product_limit(size_limit, JNITYPE_p_sdd_manager_t.getCPtr(manager));
    }


//	public static void sdd_manager_set_lr_time_limit(long time_limit,
//			JNITYPE_p_sdd_manager_t manager) {
//		SddLibJNI.sdd_manager_set_lr_time_limit(time_limit,
//				JNITYPE_p_sdd_manager_t.getCPtr(manager));
//	}
//
//	public static void sdd_manager_set_rr_time_limit(long time_limit,
//			JNITYPE_p_sdd_manager_t manager) {
//		SddLibJNI.sdd_manager_set_rr_time_limit(time_limit,
//				JNITYPE_p_sdd_manager_t.getCPtr(manager));
//	}
//
//	public static void sdd_manager_set_sw_time_limit(long time_limit,
//			JNITYPE_p_sdd_manager_t manager) {
//		SddLibJNI.sdd_manager_set_sw_time_limit(time_limit,
//				JNITYPE_p_sdd_manager_t.getCPtr(manager));
//	}
//
//	public static void sdd_manager_set_lr_size_limit(float size_limit,
//			JNITYPE_p_sdd_manager_t manager) {
//		SddLibJNI.sdd_manager_set_lr_size_limit(size_limit,
//				JNITYPE_p_sdd_manager_t.getCPtr(manager));
//	}
//
//	public static void sdd_manager_set_rr_size_limit(float size_limit,
//			JNITYPE_p_sdd_manager_t manager) {
//		SddLibJNI.sdd_manager_set_rr_size_limit(size_limit,
//				JNITYPE_p_sdd_manager_t.getCPtr(manager));
//	}
//
//	public static void sdd_manager_set_sw_size_limit(float size_limit,
//			JNITYPE_p_sdd_manager_t manager) {
//		SddLibJNI.sdd_manager_set_sw_size_limit(size_limit,
//				JNITYPE_p_sdd_manager_t.getCPtr(manager));
//	}
//
//	public static void sdd_manager_set_rr_cartesian_product_limit(
//			int cartesian_product_limit, JNITYPE_p_sdd_manager_t manager) {
//		SddLibJNI.sdd_manager_set_rr_cartesian_product_limit(
//				cartesian_product_limit,
//				JNITYPE_p_sdd_manager_t.getCPtr(manager));
//	}
//
//	public static void sdd_manager_set_sw_cartesian_product_limit(
//			int cartesian_product_limit, JNITYPE_p_sdd_manager_t manager) {
//		SddLibJNI.sdd_manager_set_sw_cartesian_product_limit(
//				cartesian_product_limit,
//				JNITYPE_p_sdd_manager_t.getCPtr(manager));
//	}
//
//	public static void sdd_manager_set_convergence_threshold(float threshold,
//			JNITYPE_p_sdd_manager_t manager) {
//		SddLibJNI.sdd_manager_set_convergence_threshold(threshold,
//				JNITYPE_p_sdd_manager_t.getCPtr(manager));
//	}

	public static JNITYPE_p_wmc_manager_t wmc_manager_new(
			JNITYPE_p_sdd_node_t node, int log_mode,
			JNITYPE_p_sdd_manager_t manager) {
		long cPtr = SddLibJNI.wmc_manager_new(
				JNITYPE_p_sdd_node_t.getCPtr(node), log_mode,
				JNITYPE_p_sdd_manager_t.getCPtr(manager));
		return (cPtr == 0) ? null : new JNITYPE_p_wmc_manager_t(cPtr);
	}

	public static void wmc_manager_free(JNITYPE_p_wmc_manager_t wmc_manager) {
		SddLibJNI.wmc_manager_free(JNITYPE_p_wmc_manager_t
				.getCPtr(wmc_manager));
	}

	public static void wmc_set_literal_weight(long literal, double weight,
			JNITYPE_p_wmc_manager_t wmc_manager) {
		SddLibJNI.wmc_set_literal_weight(literal, weight,
				JNITYPE_p_wmc_manager_t.getCPtr(wmc_manager));
	}

	public static double wmc_propagate(JNITYPE_p_wmc_manager_t wmc_manager) {
		return SddLibJNI.wmc_propagate(JNITYPE_p_wmc_manager_t
				.getCPtr(wmc_manager));
	}

	public static double wmc_zero_weight(JNITYPE_p_wmc_manager_t wmc_manager) {
		return SddLibJNI.wmc_zero_weight(JNITYPE_p_wmc_manager_t
				.getCPtr(wmc_manager));
	}

	public static double wmc_one_weight(JNITYPE_p_wmc_manager_t wmc_manager) {
		return SddLibJNI.wmc_one_weight(JNITYPE_p_wmc_manager_t
				.getCPtr(wmc_manager));
	}

	public static double wmc_literal_weight(long literal,
			JNITYPE_p_wmc_manager_t wmc_manager) {
		return SddLibJNI.wmc_literal_weight(literal,
				JNITYPE_p_wmc_manager_t.getCPtr(wmc_manager));
	}

	public static double wmc_literal_derivative(long literal,
			JNITYPE_p_wmc_manager_t wmc_manager) {
		return SddLibJNI.wmc_literal_derivative(literal,
				JNITYPE_p_wmc_manager_t.getCPtr(wmc_manager));
	}

	public static double wmc_literal_pr(long literal,
			JNITYPE_p_wmc_manager_t wmc_manager) {
		return SddLibJNI.wmc_literal_pr(literal,
				JNITYPE_p_wmc_manager_t.getCPtr(wmc_manager));
	}

}
